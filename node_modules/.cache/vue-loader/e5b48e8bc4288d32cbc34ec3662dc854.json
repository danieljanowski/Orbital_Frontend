{"remainingRequest":"/Users/daniel/codeclan_work/group_project/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/daniel/codeclan_work/group_project/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/daniel/codeclan_work/group_project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daniel/codeclan_work/group_project/client/src/components/RoversGrid.vue?vue&type=template&id=791d8e83&scoped=true&","dependencies":[{"path":"/Users/daniel/codeclan_work/group_project/client/src/components/RoversGrid.vue","mtime":1592415428016},{"path":"/Users/daniel/codeclan_work/group_project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniel/codeclan_work/group_project/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/daniel/codeclan_work/group_project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniel/codeclan_work/group_project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}