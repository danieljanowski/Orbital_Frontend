{"remainingRequest":"/Users/daniel/codeclan_work/JavascriptProject/jsad_project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daniel/codeclan_work/JavascriptProject/jsad_project/client/src/components/PlanetInfo.vue?vue&type=template&id=aeff94d4&scoped=true&","dependencies":[{"path":"/Users/daniel/codeclan_work/JavascriptProject/jsad_project/client/src/components/PlanetInfo.vue","mtime":1592415354828},{"path":"/Users/daniel/codeclan_work/JavascriptProject/jsad_project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniel/codeclan_work/JavascriptProject/jsad_project/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/daniel/codeclan_work/JavascriptProject/jsad_project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniel/codeclan_work/JavascriptProject/jsad_project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}